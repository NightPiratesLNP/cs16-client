name: Build and Deploy
on: [ push, pull_request ]

jobs:
  android:
    name: Android
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin'
          cache: gradle

      - name: Create dummy proguard file
        run: |
          echo "# Empty rules for CI" > android/app/proguard-rules.txt

      - name: Force continuous build to use debug signing
        run: |
          sed -i 's/signingConfig = signingConfigs.continuous/signingConfig signingConfigs.debug/' android/app/build.gradle

      - name: Build APK (debug keystore signed)
        run: |
          ./gradlew assembleGitContinuous
          mv app/build/outputs/apk/git/continuous/app-git-continuous.apk CS16Client-Android.apk
        working-directory: android

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Android
          path: android/CS16Client-Android.apk
  psvita:
    name: PS Vita
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libatomic1 libgcc-s1 \
            libstdc++6 gcc-multilib g++-multilib \
            ninja-build libfontconfig-dev
      - name: Setup VitaSDK
        run: |
          scripts/psvita_sdk.sh
          echo "VITASDK=/usr/local/vitasdk" >> $GITHUB_ENV
          echo "$VITASDK/bin" >> $GITHUB_PATH
      - name: Configure CMake
        run: cmake --preset "psvita-release"
      - name: Generate configuration files
        working-directory: build
        run: ${{ github.workspace }}/scripts/psvita_generate_configs.sh
      - name: Build and Package
        working-directory: build
        run: |
          cmake --build . --parallel $(nproc)
          cpack --config CPackConfig.cmake
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: PSVita
          path: build/*.zip
  windows:
    name: Windows
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [ 'x86', 'amd64' ]
      fail-fast: false
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Setup Visual Studio
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
      - name: Configure
        run: cmake --preset "win32-ci-${{ matrix.arch }}"
      - name: Build and Package
        run: |
          cmake --build .
          cpack --config CPackConfig.cmake
        working-directory: build
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.arch }}
          path: build/*.zip
  linux:
    name: Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [ 'i386', 'amd64' ]
      fail-fast: false
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Install dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install libatomic1:i386 libgcc-s1:i386 \
            libstdc++6:i386 gcc-multilib g++-multilib \
            ninja-build libfontconfig-dev:i386 libfontconfig-dev
      - name: Configure
        run: cmake --preset "linux-ci-${{ matrix.arch }}"
      - name: Build and Package
        run: |
          cmake --build .
          cpack --config CPackConfig.cmake
        working-directory: build
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.arch }}
          path: build/*.tar.gz
  macos:
    name: macOS
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [ 'x86_64', 'arm64' ]
      fail-fast: false
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Install dependencies
        run: |
          arch -${{ matrix.arch }} /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            arch -${{ matrix.arch }} brew install cmake gcc ninja fontconfig
          else
            arch -${{ matrix.arch }} /usr/local/bin/brew install cmake gcc ninja fontconfig
          fi
      - name: Configure
        run: cmake --preset "macos-ci-${{ matrix.arch }}"
      - name: Build and Package
        run: |
          if [ "${{ matrix.arch }}" == "arm64" ]; then
            arch -${{ matrix.arch }} cmake --build .
            arch -${{ matrix.arch }} cpack --config CPackConfig.cmake
          else
            arch -${{ matrix.arch }} /usr/local/bin/cmake --build .
            arch -${{ matrix.arch }} /usr/local/bin/cpack --config CPackConfig.cmake
          fi
        working-directory: build
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.arch }}
          path: build/*.zip
